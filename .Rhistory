ggplot
x<-c(10.4,5.6)
x
str(x)
x<-c(10.3,12,34.2,11,2)
print(x)
class(x)
str(x)
a=1
a
a<-c(1,2,3;3,4,2)
c(2*3:14)
seq(1,30,by=2)
z1<-NULL
for(i in 1:20) if (i%%2==0) z1<-c(z1,i)
c2<-ifelse(c1%%2==0, "EVEN","ODD")
b=c(20:1)
c=c(1:20:1)
c=c(1:20)+(19:1)
c=c(1:20)+c(19:1)
c=c(1:20，19:1)
c=c(1:20,19:1)
c
?rep
rep(tmp,5)
tmp<-c(4,6,3)
rep(tmp,5)
f<-rep(tmp,c(11,10,10))
f
f<-rep(tmp,10,len=31)
f
x=1
y=e^x
exp(x)
x<-seq(3,6,by=0.1)
y<-exp(x)*cos(x)
2^3
q1=c()
for(i in 0:11)
q1=c(q1,0.1^(3+3*i)*0.2^(1+3*i))
q1
q2=c()
for(i in 1:25)
q2=c(q2,2^i/i)
q2
2^5/2^3
？paste()
？paste
?paste
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("ggplot")
ca <- ggplot(diamonds,aes(x=carat,y=price))
print(ca)
remove.packages("ggplot2")
install.packages("ggplot2")
ca <- ggplot(diamonds,aes(x=carat,y=price))
print(ca
ca <- ggplot(diamonds,aes(x=carat,y=price))
print(ca)
ca <- ggplot(diamonds,aes(x=carat,y=price))
ca <- ggplot2(diamonds,aes(x=carat,y=price))
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
ca <- ggplot(diamonds,aes(x=carat,y=price))
ca <- ggplot(diamonds,aes(x=carat,y=price))
print(ca)
diamonds
ca <- ggplot(diamonds,aes(x=carat,y=price))
print(ca)
help('[[')
example(ggplot)
help('[[')
example(ggplot)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
help('[[')
example(ggplot)
ca <- ggplot(diamonds,aes(x=carat,y=price))
print(ca)
?paste
vec=paste("label",1:30)
fn=paste("fn",1:30,seq="")
fn=paste("fn",1:30,sep="")
x=1:10
y=seq(2:20,by=2)
y=seq(2,20,by=2)
ggplot(x,y)
plot(x,y)
set.seed(50)
xVec <- sample(0:999, 250, replace=T)
yVec <- sample(0:999, 250, replace=T)
xVec
set.seed(50)
?set.seed
y=sample(-1:1,20,replace=T)
y
y=sample(-1:1,by=0.1,20,replace=T)
b
len(b)
length(b)
1:length(b)-1
1:length(b)
b[1]
new=c()
c=c(1,2)
c
new1=c()
for(i in 1:(length(x)-1))
new1=c(new1, yVec[i+1]-xVec[i])
new1
set.seed(50)
xVec <- sample(0:999, 250, replace=T)
yVec <- sample(0:999, 250, replace=T)
new1=c()
for(i in 1:(length(x)-1))
new1=c(new1, yVec[i+1]-xVec[i])
new1
set.seed(50)
xVec <- sample(0:999, 250, replace=T)
yVec <- sample(0:999, 250, replace=T)
new1=c()
for(i in 1:(length(xVec)-1))
new1=c(new1, yVec[i+1]-xVec[i])
new1
length(new1)
a=0
if a=0 then b=4
if a==0 then b=4
help(if)
?if
sd
z=c(1,5,2,4,7,2,5,4)
z
order(z)
?order
z.sort()
sort(z)[1]
sort(z)
sort(z)[z<5]
sort(z)[sort(z)<5]
sort(z)[m<5]
sort(z)[z<5]
order(z)
order(z)[sort(z)<5]
order(z)[z<5]
z
order(z)[1]
order(z)[2]
sort(z),5
sort(z)<5
z<5
z[z<5]
c <- xVec[order(yVec)[sort(yVec)>600]]
c
b <- order(yVec)[sort(yVec)>600]
b
which(yVec>600)
(1:length(yVec))[yVec>600]
b <- order(yVec)[sort(yVec)>600]
order(yVec)[sort(yVec)>600]
c <- xVec[which[yVec>600]]
xVec[which[yVec>600]]
xVec[yVec>600]
sqrt(abs(xVec-mean(xVec))))
sqrt(abs(xVec-mean(xVec)))
sum(xVec[i] %% 2 == 0 )
sum(xVec %% 2 == 0 )
sum(yVec>max(yVec)-200)
xVec[6,4,3]
xVec[6 4 3]
xVec[order(yVec)]
order(yVec)
a=order(yVec)
A
a
xVec[a]
type(a)
type(a)
xVec[c(1:3)]
xVec[c(1,3,5)]
seq(1:length(yVec),by=3)
seq(1:7,by=3)
seq(1:7)
seq(1:7,by=2)
seq(1:8, by=2)
seq(1,8, by=2)
seq(1,9, by=2)
yVec[seq(1,length(yVec),by=3)]
yVec[c(T,F,F)]
?cumprod
cumsum(1:10)
cumprod(1:10)
sum(cumprod(seq(2,38, by=2)/seq(3,39, by=2))) + 1
1+sum(cumprod(seq(2,38,b=2)/seq(3,39,b=2)))
summary(cars)
knitr::opts_chunk$set(echo = TRUE)
c(1:20)
c(20:1)
c(1:20,19:1)
c(1:20)
c(20:1)
c(1:20,19:1)
tmp<-c(4,6,3)
rep(tmp,10)
rep(tmp,10,len=31)
rep(tmp,c(10,20,30))
x<-seq(3,6,by=0.1)
y<-exp(x)*cos(x)
x<-seq(3,6,by=0.1)
exp(x)*cos(x)
(0.1^seq(3,36,by=3))*(0.2^seq(1,34,by=3))
(2^(1:25))/(1:25)
a <- 10:100
sum(a^3+4*a^2)
b <- 1:25
sum((2^b)/b + (3^b)/(b^2))
paste("label",1:30)
paste("fn",1:30,sep="")
set.seed(50)
xVec <- sample(0:999, 250, replace=T) yVec <- sample(0:999, 250, replace=T)
yVec[-1] - xVec[-length(xVec)]
sin(yVec[-length(yVec)]) / cos(xVec[-1])
xVec[-c(249,250)] + 2*xVec[-c(1,250)]-xVec[-c(1,2)]
sum(exp(-xVec[-1])/(xVec[-length(xVec)]+10))
c(1:20)
c(20:1)
c(1:20,19:1)
tmp<-c(4,6,3)
rep(tmp,10)
rep(tmp,10,len=31)
rep(tmp,c(10,20,30))
x<-seq(3,6,by=0.1)
exp(x)*cos(x)
(0.1^seq(3,36,by=3))*(0.2^seq(1,34,by=3))
(2^(1:25))/(1:25)
set.seed(50)
xVec <- sample(0:999, 250, replace=T) yVec <- sample(0:999, 250, replace=T)
yVec[-1] - xVec[-length(xVec)]
sin(yVec[-length(yVec)]) / cos(xVec[-1])
xVec[-c(249,250)] + 2*xVec[-c(1,250)]-xVec[-c(1,2)]
sum(exp(-xVec[-1])/(xVec[-length(xVec)]+10))
yVec[-1]
yVec
yVec[1]
yVec[1,2]
set.seed(50)
xVec <- sample(0:999, 250, replace=T) yVec <- sample(0:999, 250, replace=T) #Suppose x = (x1,x2,...,xn) denotes the vector xVec and y = (y1,y2,...,yn) denotes the vector yVec
yVec[-1] - xVec[-length(xVec)] #Create the vector (y2-x1,y3-x2,...yn-xn-1)
sin(yVec[-length(yVec)]) / cos(xVec[-1]) #Create the vector(sin(y1)/cos(x2),...sin(yn-1))/cos(xn)
xVec[-c(249,250)] + 2*xVec[-c(1,250)]-xVec[-c(1,2)] #Create the vector (x1+2*x2-x3,...x(n-2)+2*x(n-1)-xn)
sum(exp(-xVec[-1])/(xVec[-length(xVec)]+10))
1+sum(cumprod(seq(2,38,by=2)/seq(3,39,by=2)))
set.seed(50)
xVec <- sample(0:999, 250, replace=T)
yVec <- sample(0:999, 250, replace=T)
#Suppose x = (x1,x2,...,xn) denotes the vector xVec and y = (y1,y2,...,yn) denotes the vector yVec
yVec[-1] - xVec[-length(xVec)] #Create the vector (y2-x1,y3-x2,...yn-xn-1)
sin(yVec[-length(yVec)]) / cos(xVec[-1]) #Create the vector(sin(y1)/cos(x2),...sin(yn-1))/cos(xn)
xVec[-c(249,250)] + 2*xVec[-c(1,250)]-xVec[-c(1,2)] #Create the vector (x1+2*x2-x3,...x(n-2)+2*x(n-1)-xn)
sum(exp(-xVec[-1])/(xVec[-length(xVec)]+10))
xVec <- sample(0:999, 250, replace=T)
yVec <- sample(0:999, 250, replace=T)
set.seed(50)
xVec <- sample(0:999, 250, replace=T)
yVec <- sample(0:999, 250, replace=T)
#Suppose x = (x1,x2,...,xn) denotes the vector xVec and y = (y1,y2,...,yn) denotes the vector yVec
yVec[-1] - xVec[-length(xVec)] #Create the vector (y2-x1,y3-x2,...yn-xn-1)
sin(yVec[-length(yVec)]) / cos(xVec[-1]) #Create the vector(sin(y1)/cos(x2),...sin(yn-1))/cos(xn)
xVec[-c(249,250)] + 2*xVec[-c(1,250)]-xVec[-c(1,2)] #Create the vector (x1+2*x2-x3,...x(n-2)+2*x(n-1)-xn)
sum(exp(-xVec[-1])/(xVec[-length(xVec)]+10))
summary(diamonds)
data("diamonds")
summary(diamonds)
data("diamonds")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
data("diamonds")
summary(diamonds)
？lapply
?apply
?lapply
mean(diamonds)
type=lapply(diamonds,class) #determine the type of each column
type
type[1]
type[2]
apply(diamonds,2,mean)[which(type=="numeric")]
apply(diamonds,2,mean)[type=="numeric"]
apply(diamonds,2,mean)
apply(diamonds,2,mean)
diamonds
apply(diamonds,2,mean)
colMeans(diamonds)[which(type=="numeric")]
colMeans(diamonds)[type=="numeric"]
colMeans(diamonds)
apply(diamonds,2,mean)
sapply(diamonds,2,mean)
lapply(diamonds,2,mean)
lapply(diamonds,mean)
lapply(diamonds,mean)[which(type=="numeric")]
lapply(diamonds,mean)[which(type=="numeric")]
sapply(diamonds,mean)[which(type=="numeric")]
type=sapply(diamonds,class) #determine the type of each column
type
type=sapply(diamonds,class) #determine the type of each column
type
summary(diamonds)
a=[1,2,3,4]
a=c(1,2,3,4)
a
a=c("a-b","d-d","g-r")
a
b=c(1,2,3)
data.frame(a,b,colnames("name","coo"))
data.frame(a,b)
data.frame(a,b)
,colnames("name","coo")
z=data.frame(a,b)
z$a
z$b
z$a$levels
z$a$Levels
z[1]
z[a]
?rcorr
?rcorr()
library(Hmisc)
install.packages(Hmisc)
cor(x,y,method="pearson")
z
class(z)
class(z$b)
type=sapply(z,class)
h=z[which(type=="numeric")]
h
z <- z[which(type=="numeric")]
a
z
pair_name=c()
pair_name
print("hello")
print("hello %s","ds")
print("hello %s",%"ds")
?format()
a
b
data.frame(a,b)
?paste
paste("a","b",collapse = "-")
paste("a","b",sep = "-")
Pearson_coeff <- funciton(dafra)
{
type=sapply(diamonds,class)
dafra <- dafra[which(type=="numeric")] # take out all numeric columns
colna <- colnames(dafra) #extract the column names
pairwise_names=c()
pairwise_cor=c()
for(i in 1:(length(colna)-1))
{
for(j in i+1:length(colna))
{
temp <- cor(dafra[i],dafra[j],method="pearson")
pairwise_names <- c(pairwise_names,paste(colna[i],colna[j],sep="-"))
pairwise_cor <- c(pairwise_cor,temp)
}
}
return (data.frame(pairwise_names,pairwise_cor))
}
Pearson_coeff(diamonds)
dafra <- diamonds
Pearson_coeff <- funciton(dafra)
{
type=sapply(diamonds,class)
dafra <- dafra[which(type=="numeric")] # take out all numeric columns
colna <- colnames(dafra) #extract the column names
pairwise_names=c()
pairwise_cor=c()
for(i in 1:(length(colna)-1))
{
for(j in i+1:length(colna))
{
temp <- cor(dafra[i],dafra[j],method="pearson")
pairwise_names <- c(pairwise_names,paste(colna[i],colna[j],sep="-"))
pairwise_cor <- c(pairwise_cor,temp)
}
}
return (data.frame(pairwise_names,pairwise_cor))
}
dafra <- diamonds
Pearson_coeff <- funciton(dafra)
{
type=sapply(diamonds,class)
dafra <- dafra[which(type=="numeric")] # take out all numeric columns
colna <- colnames(dafra) #extract the column names
pairwise_names=c()
pairwise_cor=c()
for(i in 1:(length(colna)-1))
{
for(j in i+1:length(colna))
{
temp <- cor(dafra[i],dafra[j],method="pearson")
pairwise_names <- c(pairwise_names,paste(colna[i],colna[j],sep="-"))
pairwise_cor <- c(pairwise_cor,temp)
}
}
return (data.frame(pairwise_names,pairwise_cor))
}
dafra <- diamonds
Pearson_coeff <- funciton(dafra)
{
type=sapply(diamonds,class)
dafra <- dafra[which(type=="numeric")] # take out all numeric columns
colna <- colnames(dafra) #extract the column names
pairwise_names=c()
pairwise_cor=c()
for(i in 1:(length(colna)-1))
{
for(j in (i+1):length(colna))
{
temp <- cor(dafra[i],dafra[j],method="pearson")
pairwise_names <- c(pairwise_names,paste(colna[i],colna[j],sep="-"))
pairwise_cor <- c(pairwise_cor,temp)
}
}
return (data.frame(pairwise_names,pairwise_cor))
}
dafra <- diamonds
result = Pearson_coeff(dafra)
Pearson_coeff <- funciton(dafra)
{
type=sapply(diamonds,class)
dafra <- dafra[which(type=="numeric")] # take out all numeric columns
colna <- colnames(dafra) #extract the column names
pairwise_names=c()
pairwise_cor=c()
for(i in 1:(length(colna)-1))
{
for(j in (i+1):length(colna))
{
temp <- cor(dafra[i],dafra[j],method="pearson")
pairwise_names <- c(pairwise_names,paste(colna[i],colna[j],sep="-"))
pairwise_cor <- c(pairwise_cor,temp)
}
}
return (data.frame(pairwise_names,pairwise_cor))
}
Pearson_coeff <- funciton(dafra)
{
type=sapply(diamonds,class)
dafra <- dafra[which(type=="numeric")] # take out all numeric columns
colna <- colnames(dafra) #extract the column names
pairwise_names=c()
pairwise_cor=c()
for(i in 1:(length(colna)-1))
{
for(j in (i+1):length(colna))
{
temp <- cor(dafra[i],dafra[j],method="pearson")
pairwise_names <- c(pairwise_names,paste(colna[i],colna[j],sep="-"))
pairwise_cor <- c(pairwise_cor,temp)
}
}
return (data.frame(pairwise_names,pairwise_cor))
}
hehe=Pearson_coeff(diamonds)
Pearson_coeff <- funciton(dafra)
{
type=sapply(diamonds,class)
dafra <- dafra[which(type=="numeric")] # take out all numeric columns
colna <- colnames(dafra) #extract the column names
pairwise_names=c()
pairwise_cor=c()
for(i in 1:(length(colna)-1))
{
for(j in (i+1):length(colna))
{
temp <- cor(dafra[i],dafra[j],method="pearson")
pairwise_names <- c(pairwise_names,paste(colna[i],colna[j],sep="-"))
pairwise_cor <- c(pairwise_cor,temp)
}
}
return (data.frame(pairwise_names,pairwise_cor))
}
Pearson_coeff(diamonds)
Pearson_coeff <- function(dafra)
{
type=sapply(diamonds,class)
dafra <- dafra[which(type=="numeric")] # take out all numeric columns
colna <- colnames(dafra) #extract the column names
pairwise_names=c()
pairwise_cor=c()
for(i in 1:(length(colna)-1))
{
for(j in (i+1):length(colna))
{
temp <- cor(dafra[i],dafra[j],method="pearson")
pairwise_names <- c(pairwise_names,paste(colna[i],colna[j],sep="-"))
pairwise_cor <- c(pairwise_cor,temp)
}
}
return (data.frame(pairwise_names,pairwise_cor))
}
Pearson_coeff(diamonds)
str("diamonds")
str(diamonds)
?str()
str(1:12)
