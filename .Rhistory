ggplot
x<-c(10.4,5.6)
x
str(x)
x<-c(10.3,12,34.2,11,2)
print(x)
class(x)
str(x)
a=1
a
a<-c(1,2,3;3,4,2)
c(2*3:14)
seq(1,30,by=2)
z1<-NULL
for(i in 1:20) if (i%%2==0) z1<-c(z1,i)
c2<-ifelse(c1%%2==0, "EVEN","ODD")
b=c(20:1)
c=c(1:20:1)
c=c(1:20)+(19:1)
c=c(1:20)+c(19:1)
c=c(1:20，19:1)
c=c(1:20,19:1)
c
?rep
rep(tmp,5)
tmp<-c(4,6,3)
rep(tmp,5)
f<-rep(tmp,c(11,10,10))
f
f<-rep(tmp,10,len=31)
f
x=1
y=e^x
exp(x)
x<-seq(3,6,by=0.1)
y<-exp(x)*cos(x)
2^3
q1=c()
for(i in 0:11)
q1=c(q1,0.1^(3+3*i)*0.2^(1+3*i))
q1
q2=c()
for(i in 1:25)
q2=c(q2,2^i/i)
q2
2^5/2^3
？paste()
？paste
?paste
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("ggplot")
ca <- ggplot(diamonds,aes(x=carat,y=price))
print(ca)
remove.packages("ggplot2")
install.packages("ggplot2")
ca <- ggplot(diamonds,aes(x=carat,y=price))
print(ca
ca <- ggplot(diamonds,aes(x=carat,y=price))
print(ca)
ca <- ggplot(diamonds,aes(x=carat,y=price))
ca <- ggplot2(diamonds,aes(x=carat,y=price))
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
ca <- ggplot(diamonds,aes(x=carat,y=price))
ca <- ggplot(diamonds,aes(x=carat,y=price))
print(ca)
diamonds
ca <- ggplot(diamonds,aes(x=carat,y=price))
print(ca)
help('[[')
example(ggplot)
help('[[')
example(ggplot)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
help('[[')
example(ggplot)
ca <- ggplot(diamonds,aes(x=carat,y=price))
print(ca)
?paste
vec=paste("label",1:30)
fn=paste("fn",1:30,seq="")
fn=paste("fn",1:30,sep="")
x=1:10
y=seq(2:20,by=2)
y=seq(2,20,by=2)
ggplot(x,y)
plot(x,y)
set.seed(50)
xVec <- sample(0:999, 250, replace=T)
yVec <- sample(0:999, 250, replace=T)
xVec
set.seed(50)
?set.seed
y=sample(-1:1,20,replace=T)
y
y=sample(-1:1,by=0.1,20,replace=T)
b
len(b)
length(b)
1:length(b)-1
1:length(b)
b[1]
new=c()
c=c(1,2)
c
new1=c()
for(i in 1:(length(x)-1))
new1=c(new1, yVec[i+1]-xVec[i])
new1
set.seed(50)
xVec <- sample(0:999, 250, replace=T)
yVec <- sample(0:999, 250, replace=T)
new1=c()
for(i in 1:(length(x)-1))
new1=c(new1, yVec[i+1]-xVec[i])
new1
set.seed(50)
xVec <- sample(0:999, 250, replace=T)
yVec <- sample(0:999, 250, replace=T)
new1=c()
for(i in 1:(length(xVec)-1))
new1=c(new1, yVec[i+1]-xVec[i])
new1
length(new1)
a=0
if a=0 then b=4
if a==0 then b=4
help(if)
?if
sd
z=c(1,5,2,4,7,2,5,4)
z
order(z)
?order
z.sort()
sort(z)[1]
sort(z)
sort(z)[z<5]
sort(z)[sort(z)<5]
sort(z)[m<5]
sort(z)[z<5]
order(z)
order(z)[sort(z)<5]
order(z)[z<5]
z
order(z)[1]
order(z)[2]
sort(z),5
sort(z)<5
z<5
z[z<5]
c <- xVec[order(yVec)[sort(yVec)>600]]
c
b <- order(yVec)[sort(yVec)>600]
b
which(yVec>600)
(1:length(yVec))[yVec>600]
b <- order(yVec)[sort(yVec)>600]
order(yVec)[sort(yVec)>600]
c <- xVec[which[yVec>600]]
xVec[which[yVec>600]]
xVec[yVec>600]
sqrt(abs(xVec-mean(xVec))))
sqrt(abs(xVec-mean(xVec)))
sum(xVec[i] %% 2 == 0 )
sum(xVec %% 2 == 0 )
sum(yVec>max(yVec)-200)
xVec[6,4,3]
xVec[6 4 3]
xVec[order(yVec)]
order(yVec)
a=order(yVec)
A
a
xVec[a]
type(a)
type(a)
xVec[c(1:3)]
xVec[c(1,3,5)]
seq(1:length(yVec),by=3)
seq(1:7,by=3)
seq(1:7)
seq(1:7,by=2)
seq(1:8, by=2)
seq(1,8, by=2)
seq(1,9, by=2)
yVec[seq(1,length(yVec),by=3)]
yVec[c(T,F,F)]
?cumprod
cumsum(1:10)
cumprod(1:10)
sum(cumprod(seq(2,38, by=2)/seq(3,39, by=2))) + 1
1+sum(cumprod(seq(2,38,b=2)/seq(3,39,b=2)))
